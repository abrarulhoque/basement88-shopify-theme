{{ 'collections-directory.css' | asset_url | stylesheet_tag }}

{% style %}
  #shopify-section-{{ section.id }} {
    padding: {{ section.settings.padding_top }}px 0 {{ section.settings.padding_bottom }}px;
  }
{% endstyle %}


<div class="collections-directory">
  <div class="container">
    {% if section.settings.heading != blank %}
      <div class="collections-directory__header">
        <h1 class="collections-directory__title">{{ section.settings.heading }}</h1>
      </div>
    {% endif %}

    <!-- Search Box -->
    <div class="collections-directory__search">
      <input 
        type="text" 
        id="collections-search" 
        placeholder="{{ section.settings.search_placeholder | default: 'Search designers' }}"
        class="collections-directory__search-input"
      >
    </div>

    <!-- Alphabetical Navigation -->
    <div class="collections-directory__nav">
      <button class="collections-directory__nav-btn active" data-filter="all">{{ section.settings.all_label | default: 'All' }}</button>
      <button class="collections-directory__nav-btn" data-filter="#">#</button>
      {% assign alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" | split: "" %}
      {% for letter in alphabet %}
        <button class="collections-directory__nav-btn" data-filter="{{ letter }}">{{ letter }}</button>
      {% endfor %}
    </div>

    <!-- Collections Grid -->
    <div class="collections-directory__grid">
        {% liquid
          # First, gather all collections based on source
          assign all_collections_to_display = blank
          
          if section.settings.metaobject_type != blank and section.settings.metaobject_handles != blank
            # Multiple metaobjects
            assign metaobject_handles = section.settings.metaobject_handles | split: ','
            
            for metaobject_handle in metaobject_handles
              assign trimmed_handle = metaobject_handle | strip
              assign metaobject = shop.metaobjects[section.settings.metaobject_type][trimmed_handle]
              
              if metaobject.selected_collections.value and metaobject.selected_collections.type == "list.collection_reference"
                for collection in metaobject.selected_collections.value
                  if collection.products_count > 0 or section.settings.hide_empty_collections == false
                    assign all_collections_to_display = all_collections_to_display | append: collection.handle | append: ','
                  endif
                endfor
              elsif metaobject.selected_collections
                for collection_data in metaobject.selected_collections.value
                  assign collection = collections[collection_data.handle]
                  if collection
                    if collection.products_count > 0 or section.settings.hide_empty_collections == false
                      assign all_collections_to_display = all_collections_to_display | append: collection.handle | append: ','
                    endif
                  endif
                endfor
              endif
            endfor
          elsif section.settings.metaobject_type != blank and section.settings.metaobject_handle != blank
            # Single metaobject
            assign metaobject = shop.metaobjects[section.settings.metaobject_type][section.settings.metaobject_handle]
            
            if metaobject.selected_collections.value and metaobject.selected_collections.type == "list.collection_reference"
              for collection in metaobject.selected_collections.value
                if collection.products_count > 0 or section.settings.hide_empty_collections == false
                  assign all_collections_to_display = all_collections_to_display | append: collection.handle | append: ','
                endif
              endfor
            elsif metaobject.selected_collections
              for collection_data in metaobject.selected_collections.value
                assign collection = collections[collection_data.handle]
                if collection
                  if collection.products_count > 0 or section.settings.hide_empty_collections == false
                    assign all_collections_to_display = all_collections_to_display | append: collection.handle | append: ','
                  endif
                endif
              endfor
            endif
          elsif section.settings.metafield_namespace != blank and section.settings.metafield_key != blank
            # Legacy metafield approach
            assign metafield_collections = shop.metafields[section.settings.metafield_namespace][section.settings.metafield_key].value
            
            if metafield_collections.size > 0
              for collection_handle in metafield_collections
                assign collection = collections[collection_handle]
                if collection
                  if collection.products_count > 0 or section.settings.hide_empty_collections == false
                    assign all_collections_to_display = all_collections_to_display | append: collection.handle | append: ','
                  endif
                endif
              endfor
            endif
          else
            # Fallback to all collections
            paginate collections by 250
              for collection in collections
                unless section.settings.hide_empty_collections and collection.products_count == 0
                  assign all_collections_to_display = all_collections_to_display | append: collection.handle | append: ','
                endunless
              endfor
            endpaginate
          endif
          
          # Convert to array and sort
          assign collection_handles_array = all_collections_to_display | split: ','
          assign sorted_collections = blank
          
          # Build sorted collection objects
          for handle in collection_handles_array
            if handle != blank
              assign col = collections[handle]
              if col
                assign sorted_collections = sorted_collections | append: col.handle | append: ','
              endif
            endif
          endfor
          
          assign sorted_handles = sorted_collections | split: ','
          
          # Now organize by letter
          assign alphabet = '#,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z' | split: ','
          assign collections_by_letter = blank
          
          for letter in alphabet
            assign collections_for_letter = blank
            for handle in sorted_handles
              if handle != blank
                assign collection = collections[handle]
                if collection
                  assign first_char = collection.title | slice: 0 | upcase
                  assign is_number = '0123456789' | split: ''
                  if is_number contains first_char
                    assign first_char = '#'
                  endif
                  if first_char == letter
                    assign collections_for_letter = collections_for_letter | append: collection.handle | append: ','
                  endif
                endif
              endif
            endfor
            if collections_for_letter != blank
              assign collections_by_letter = collections_by_letter | append: letter | append: ':' | append: collections_for_letter | append: '|'
            endif
          endfor

          assign all_letter_groups = collections_by_letter | split: '|'
          assign half_point = all_letter_groups.size | divided_by: 2
        %}


        <div class="collections-directory__wrapper">
          {% for letter_group in all_letter_groups %}
            {% if letter_group != blank %}
              {% assign letter_data = letter_group | split: ':' %}
              {% assign letter = letter_data[0] %}
              {% assign collection_handles = letter_data[1] | split: ',' %}
              
              <div class="collections-directory__letter-section" data-letter="{{ letter }}">
                <h3 class="collections-directory__letter-heading">{{ letter }}</h3>
                <div class="collections-directory__letter-grid">
                  {% for handle in collection_handles %}
                    {% if handle != blank %}
                      {% assign collection = collections[handle] %}
                      {% if collection %}
                        <div class="collections-directory__item" data-letter="{{ letter }}" data-name="{{ collection.title | downcase }}">
                          <a href="{{ collection.url }}" class="collections-directory__link">
                            {{ collection.title }}
                          </a>
                        </div>
                      {% endif %}
                    {% endif %}
                  {% endfor %}
                </div>
              </div>
            {% endif %}
          {% endfor %}
        </div>
    </div>

    <!-- No Results Message -->
    <div class="collections-directory__empty" style="display: none;">
      <p>{{ section.settings.no_results_message | default: 'No collections found.' }}</p>
    </div>
  </div>
</div>

<script>
class CollectionsDirectory {
  constructor(container) {
    this.container = container;
    this.searchInput = container.querySelector('#collections-search');
    this.navButtons = container.querySelectorAll('.collections-directory__nav-btn');
    this.items = container.querySelectorAll('.collections-directory__item');
    this.emptyMessage = container.querySelector('.collections-directory__empty');
    this.grid = container.querySelector('.collections-directory__grid');
    this.activeFilter = 'all';
    this.searchTerm = '';
    
    this.init();
  }
  
  init() {
    this.updateAvailableFilters();
    this.bindEvents();
  }
  
  getItemsByLetter() {
    const letterMap = {};
    this.items.forEach(item => {
      const letter = item.dataset.letter;
      if (!letterMap[letter]) letterMap[letter] = 0;
      letterMap[letter]++;
    });
    return letterMap;
  }
  
  bindEvents() {
    // Search functionality
    this.searchInput.addEventListener('input', (e) => {
      this.searchTerm = e.target.value.toLowerCase().trim();
      this.filterItems();
    });
    
    // Navigation buttons
    this.navButtons.forEach(button => {
      button.addEventListener('click', () => {
        if (button.classList.contains('disabled')) return;
        
        this.activeFilter = button.dataset.filter;
        
        // Update active button
        this.navButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        
        this.filterItems();
      });
    });
  }
  
  updateAvailableFilters() {
    const availableLetters = new Set();
    const letterSections = this.container.querySelectorAll('.collections-directory__letter-section');
    
    letterSections.forEach(section => {
      availableLetters.add(section.dataset.letter);
    });
    
    // Disable navigation buttons for letters without collections
    this.navButtons.forEach(button => {
      if (button.dataset.filter !== 'all' && !availableLetters.has(button.dataset.filter)) {
        button.classList.add('disabled');
      } else {
        button.classList.remove('disabled');
      }
    });
  }
  
  filterItems() {
    let visibleCount = 0;
    const letterSections = this.container.querySelectorAll('.collections-directory__letter-section');
    
    // Handle letter sections
    letterSections.forEach(section => {
      const sectionLetter = section.dataset.letter;
      const items = section.querySelectorAll('.collections-directory__item');
      let sectionVisibleCount = 0;
      
      items.forEach(item => {
        const matchesFilter = this.activeFilter === 'all' || item.dataset.letter === this.activeFilter;
        const matchesSearch = this.searchTerm === '' || item.dataset.name.includes(this.searchTerm);
        
        if (matchesFilter && matchesSearch) {
          item.style.display = '';
          sectionVisibleCount++;
          visibleCount++;
        } else {
          item.style.display = 'none';
        }
      });
      
      // Show/hide entire letter section based on whether it has visible items
      if (sectionVisibleCount > 0) {
        section.style.display = '';
      } else {
        section.style.display = 'none';
      }
    });
    
    // Show/hide empty message
    if (visibleCount === 0) {
      this.emptyMessage.style.display = 'block';
    } else {
      this.emptyMessage.style.display = 'none';
    }
  }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  const containers = document.querySelectorAll('.collections-directory');
  containers.forEach(container => {
    new CollectionsDirectory(container);
  });
});
</script>

{% schema %}
{
  "name": "Collections Directory",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "default": "Designers",
      "label": "Heading"
    },
    {
      "type": "text",
      "id": "search_placeholder",
      "default": "Search designers",
      "label": "Search placeholder text"
    },
    {
      "type": "text",
      "id": "all_label",
      "default": "All",
      "label": "'All' button label"
    },
    {
      "type": "text",
      "id": "no_results_message",
      "default": "No collections found.",
      "label": "No results message"
    },
    {
      "type": "select",
      "id": "sort",
      "label": "Sort collections by",
      "default": "alphabetical",
      "options": [
        {
          "value": "alphabetical",
          "label": "Alphabetical (A-Z)"
        },
        {
          "value": "alphabetical_reversed",
          "label": "Alphabetical (Z-A)"
        },
        {
          "value": "date",
          "label": "Date created (oldest first)"
        },
        {
          "value": "date_reversed",
          "label": "Date created (newest first)"
        },
        {
          "value": "products_high",
          "label": "Product count (high to low)"
        },
        {
          "value": "products_low",
          "label": "Product count (low to high)"
        }
      ]
    },
    {
      "type": "checkbox",
      "id": "hide_empty_collections",
      "default": true,
      "label": "Hide empty collections"
    },
    {
      "type": "header",
      "content": "Metaobject Collection Selection"
    },
    {
      "type": "text",
      "id": "metaobject_type",
      "label": "Metaobject type",
      "info": "e.g. az_collections_list (API key of your metaobject definition)"
    },
    {
      "type": "text",
      "id": "metaobject_handles",
      "label": "Metaobject handles (comma-separated)",
      "info": "e.g. az-collections-list-part1, az-collections-list-part2, az-collections-list-part3"
    },
    {
      "type": "text",
      "id": "metaobject_handle",
      "label": "Metaobject handle (single)",
      "info": "e.g. az-collections-list-twtuk1lv (handle of your metaobject entry)"
    },
    {
      "type": "header",
      "content": "Legacy Metafield Collection Selection"
    },
    {
      "type": "text",
      "id": "metafield_namespace",
      "label": "Metafield namespace",
      "info": "e.g. custom"
    },
    {
      "type": "text",
      "id": "metafield_key",
      "label": "Metafield key",
      "info": "e.g. az_collections"
    },
    {
      "type": "header",
      "content": "Section spacing"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Top padding",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Bottom padding",
      "default": 36
    }
  ],
  "presets": [
    {
      "name": "Collections Directory"
    }
  ]
}
{% endschema %} 