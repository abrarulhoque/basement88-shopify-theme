{{ 'collections-directory.css' | asset_url | stylesheet_tag }}

{% style %}
  #shopify-section-{{ section.id }} {
    padding: {{ section.settings.padding_top }}px 0 {{ section.settings.padding_bottom }}px;
  }
{% endstyle %}



<div class="collections-directory">
  <div class="container">
    {% if section.settings.heading != blank %}
      <div class="collections-directory__header">
        <h1 class="collections-directory__title">{{ section.settings.heading }}</h1>
      </div>
    {% endif %}

    <!-- Search Box -->
    <div class="collections-directory__search">
      <input 
        type="text" 
        id="collections-search" 
        placeholder="{{ section.settings.search_placeholder | default: 'Search designers' }}"
        class="collections-directory__search-input"
      >
    </div>

    <!-- Alphabetical Navigation -->
    <div class="collections-directory__nav">
      <button class="collections-directory__nav-btn active" data-filter="all">{{ section.settings.all_label | default: 'All' }}</button>
      <button class="collections-directory__nav-btn" data-filter="#">#</button>
      {% assign alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" | split: "" %}
      {% for letter in alphabet %}
        <button class="collections-directory__nav-btn" data-filter="{{ letter }}">{{ letter }}</button>
      {% endfor %}
    </div>

    <!-- Collections Grid -->
    <div class="collections-directory__grid">
      {% paginate collections by 250 %}
        {% liquid
          case section.settings.sort
            when 'alphabetical_reversed'
              assign sorted_collections = collections | sort: 'title' | reverse
            when 'date'
              assign sorted_collections = collections | sort: 'published_at'
            when 'date_reversed'
              assign sorted_collections = collections | sort: 'published_at' | reverse
            when 'products_high'
              assign sorted_collections = collections | sort: 'all_products_count' | reverse
            when 'products_low'
              assign sorted_collections = collections | sort: 'all_products_count'
            else
              assign sorted_collections = collections | sort: 'title'
          endcase

          assign alphabet = '#,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z' | split: ','
          assign collections_by_letter = blank
          assign debug_processed_count = 0
          assign debug_filtered_count = 0
          
          for letter in alphabet
            assign collections_for_letter = blank
            for collection in sorted_collections
              assign debug_processed_count = debug_processed_count | plus: 1
              unless section.settings.hide_empty_collections and collection.products_count == 0
                assign debug_filtered_count = debug_filtered_count | plus: 1
                assign first_char = collection.title | slice: 0 | upcase
                assign is_number = '0123456789' | split: ''
                if is_number contains first_char
                  assign first_char = '#'
                endif
                if first_char == letter
                  assign collections_for_letter = collections_for_letter | append: collection.handle | append: ','
                endif
              endunless
            endfor
            if collections_for_letter != blank
              assign collections_by_letter = collections_by_letter | append: letter | append: ':' | append: collections_for_letter | append: '|'
            endif
          endfor

          assign all_letter_groups = collections_by_letter | split: '|'
          assign half_point = all_letter_groups.size | divided_by: 2
        %}



        <div class="collections-directory__columns">
          <div class="collections-directory__column collections-directory__column--left">
            {% for i in (0..half_point) %}
              {% if all_letter_groups[i] != blank %}
                {% assign letter_data = all_letter_groups[i] | split: ':' %}
                {% assign letter = letter_data[0] %}
                {% assign collection_handles = letter_data[1] | split: ',' %}
                
                <div class="collections-directory__letter-block" data-letter="{{ letter }}">
                  <h3 class="collections-directory__letter-heading">{{ letter }}</h3>
                  <div class="collections-directory__letter-items">
                    {% for handle in collection_handles %}
                      {% if handle != blank %}
                        {% assign collection = collections[handle] %}
                        {% if collection %}
                          <div class="collections-directory__item" data-letter="{{ letter }}" data-name="{{ collection.title | downcase }}">
                            <a href="{{ collection.url }}" class="collections-directory__link">
                              {{ collection.title }}
                            </a>
                          </div>
                        {% endif %}
                      {% endif %}
                    {% endfor %}
                  </div>
                </div>
              {% endif %}
            {% endfor %}
          </div>

          <div class="collections-directory__column collections-directory__column--right">
            {% assign start_index = half_point | plus: 1 %}
            {% assign end_index = all_letter_groups.size | minus: 1 %}
            {% for i in (start_index..end_index) %}
              {% if all_letter_groups[i] != blank %}
                {% assign letter_data = all_letter_groups[i] | split: ':' %}
                {% assign letter = letter_data[0] %}
                {% assign collection_handles = letter_data[1] | split: ',' %}
                
                <div class="collections-directory__letter-block" data-letter="{{ letter }}">
                  <h3 class="collections-directory__letter-heading">{{ letter }}</h3>
                  <div class="collections-directory__letter-items">
                    {% for handle in collection_handles %}
                      {% if handle != blank %}
                        {% assign collection = collections[handle] %}
                        {% if collection %}
                          <div class="collections-directory__item" data-letter="{{ letter }}" data-name="{{ collection.title | downcase }}">
                            <a href="{{ collection.url }}" class="collections-directory__link">
                              {{ collection.title }}
                            </a>
                          </div>
                        {% endif %}
                      {% endif %}
                    {% endfor %}
                  </div>
                </div>
              {% endif %}
            {% endfor %}
          </div>
        </div>



      {% endpaginate %}
    </div>

    <!-- No Results Message -->
    <div class="collections-directory__empty" style="display: none;">
      <p>{{ section.settings.no_results_message | default: 'No collections found.' }}</p>
    </div>

    <!-- Loading Indicator -->
    <div class="collections-directory__loading" style="display: none; text-align: center; padding: 20px; background: #f0f8ff; border-radius: 5px; margin-top: 20px;">
      <p style="margin: 0; color: #333;">
        <span style="display: inline-block; width: 20px; height: 20px; border: 2px solid #ddd; border-top: 2px solid #333; border-radius: 50%; animation: spin 1s linear infinite; margin-right: 10px;"></span>
        Loading additional collections...
      </p>
    </div>

    <style>
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
    </style>
  </div>
</div>

<script>
class CollectionsDirectory {
  constructor(container) {
    this.container = container;
    this.searchInput = container.querySelector('#collections-search');
    this.navButtons = container.querySelectorAll('.collections-directory__nav-btn');
    this.items = container.querySelectorAll('.collections-directory__item');
    this.emptyMessage = container.querySelector('.collections-directory__empty');
    this.loadingMessage = container.querySelector('.collections-directory__loading');
    this.grid = container.querySelector('.collections-directory__grid');
    this.activeFilter = 'all';
    this.searchTerm = '';
    this.allCollections = [];
    this.isLoading = false;
    

    
    this.init();
  }
  
  init() {
    this.updateAvailableFilters();
    this.bindEvents();
    
    // Load all collections via API to overcome pagination limits
    this.loadAllCollectionsViaAPI();
  }
  
  async loadAllCollectionsViaAPI() {
    // Check if we need to load more collections
    const totalCollections = parseInt('{{ shop.collections_count }}');
    const currentlyLoaded = this.items.length;
    
    if (currentlyLoaded >= totalCollections) {
      return;
    }
    this.isLoading = true;
    this.showLoading();
    
    try {
      // Load all pages via AJAX
      await this.loadAdditionalPages();
    } catch (error) {
      // Silently handle errors
    } finally {
      this.isLoading = false;
      this.hideLoading();
    }
  }
  
  async loadAdditionalPages() {
    const currentPage = {{ paginate.current_page | default: 1 }};
    const totalPages = {{ paginate.pages | default: 1 }};
    
    if (totalPages <= 1) {
      return;
    }
    
    // Load all subsequent pages
    for (let page = currentPage + 1; page <= totalPages; page++) {
      await this.loadPage(page);
    }
    this.updateAvailableFilters();
    this.filterItems();
  }
  
  async loadPage(pageNumber) {
    try {
      const url = new URL(window.location);
      url.searchParams.set('page', pageNumber);
      
      const response = await fetch(url.toString());
      const html = await response.text();
      
      // Parse the HTML and extract collection items
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      const newItems = doc.querySelectorAll('.collections-directory__item');
      

      
      // Add new items to the appropriate letter blocks
      newItems.forEach(item => {
        const letter = item.dataset.letter;
        const letterBlock = this.container.querySelector(`[data-letter="${letter}"] .collections-directory__letter-items`);
        
        if (letterBlock) {
          // Clone the item and append it
          const clonedItem = item.cloneNode(true);
          letterBlock.appendChild(clonedItem);
        } else {
          // Create new letter block if it doesn't exist
          this.createLetterBlock(letter, item);
        }
      });
      
      // Update items list
      this.items = this.container.querySelectorAll('.collections-directory__item');
      
    } catch (error) {
      // Silently handle page loading errors
    }
  }
  
  createLetterBlock(letter, firstItem) {
    const isNumber = '0123456789'.includes(letter);
    const displayLetter = isNumber ? '#' : letter;
    
    // Determine which column to add to (maintain alphabetical order)
    const leftColumn = this.container.querySelector('.collections-directory__column--left');
    const rightColumn = this.container.querySelector('.collections-directory__column--right');
    
    // Simple logic: letters A-M go to left, N-Z go to right
    const targetColumn = (letter <= 'M' || letter === '#') ? leftColumn : rightColumn;
    
    const letterBlock = document.createElement('div');
    letterBlock.className = 'collections-directory__letter-block';
    letterBlock.dataset.letter = displayLetter;
    
    letterBlock.innerHTML = `
      <h3 class="collections-directory__letter-heading">${displayLetter}</h3>
      <div class="collections-directory__letter-items">
        ${firstItem.outerHTML}
      </div>
    `;
    
    targetColumn.appendChild(letterBlock);
  }
  
  showLoading() {
    if (this.loadingMessage) {
      this.loadingMessage.style.display = 'block';
    }
  }
  
  hideLoading() {
    if (this.loadingMessage) {
      this.loadingMessage.style.display = 'none';
    }
  }
  
  getItemsByLetter() {
    const letterMap = {};
    this.items.forEach(item => {
      const letter = item.dataset.letter;
      if (!letterMap[letter]) letterMap[letter] = 0;
      letterMap[letter]++;
    });
    return letterMap;
  }
  
  bindEvents() {
    // Search functionality
    this.searchInput.addEventListener('input', (e) => {
      this.searchTerm = e.target.value.toLowerCase().trim();
      this.filterItems();
    });
    
    // Navigation buttons
    this.navButtons.forEach(button => {
      button.addEventListener('click', () => {
        if (button.classList.contains('disabled')) return;
        
        this.activeFilter = button.dataset.filter;
        
        // Update active button
        this.navButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        
        this.filterItems();
      });
    });
  }
  
  updateAvailableFilters() {
    const availableLetters = new Set();
    const letterBlocks = this.container.querySelectorAll('.collections-directory__letter-block');
    
    letterBlocks.forEach(block => {
      availableLetters.add(block.dataset.letter);
    });
    

    
    // Disable navigation buttons for letters without collections
    this.navButtons.forEach(button => {
      if (button.dataset.filter !== 'all' && !availableLetters.has(button.dataset.filter)) {
        button.classList.add('disabled');
      } else {
        button.classList.remove('disabled');
      }
    });
  }
  
  filterItems() {
    let visibleCount = 0;
    const letterBlocks = this.container.querySelectorAll('.collections-directory__letter-block');
    
    // Handle letter blocks
    letterBlocks.forEach(block => {
      const blockLetter = block.dataset.letter;
      const items = block.querySelectorAll('.collections-directory__item');
      let blockVisibleCount = 0;
      
      items.forEach(item => {
        const matchesFilter = this.activeFilter === 'all' || item.dataset.letter === this.activeFilter;
        const matchesSearch = this.searchTerm === '' || item.dataset.name.includes(this.searchTerm);
        
        if (matchesFilter && matchesSearch) {
          item.style.display = '';
          blockVisibleCount++;
          visibleCount++;
        } else {
          item.style.display = 'none';
        }
      });
      
      // Show/hide entire letter block based on whether it has visible items
      if (blockVisibleCount > 0) {
        block.style.display = '';
      } else {
        block.style.display = 'none';
      }
    });
    
    // Show/hide empty message
    if (visibleCount === 0) {
      this.emptyMessage.style.display = 'block';
    } else {
      this.emptyMessage.style.display = 'none';
    }
  }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  const containers = document.querySelectorAll('.collections-directory');
  containers.forEach(container => {
    new CollectionsDirectory(container);
  });
});
</script>

{% schema %}
{
  "name": "Collections Directory",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "default": "Designers",
      "label": "Heading"
    },
    {
      "type": "text",
      "id": "search_placeholder",
      "default": "Search designers",
      "label": "Search placeholder text"
    },
    {
      "type": "text",
      "id": "all_label",
      "default": "All",
      "label": "'All' button label"
    },
    {
      "type": "text",
      "id": "no_results_message",
      "default": "No collections found.",
      "label": "No results message"
    },
    {
      "type": "select",
      "id": "sort",
      "label": "Sort collections by",
      "default": "alphabetical",
      "options": [
        {
          "value": "alphabetical",
          "label": "Alphabetical (A-Z)"
        },
        {
          "value": "alphabetical_reversed",
          "label": "Alphabetical (Z-A)"
        },
        {
          "value": "date",
          "label": "Date created (oldest first)"
        },
        {
          "value": "date_reversed",
          "label": "Date created (newest first)"
        },
        {
          "value": "products_high",
          "label": "Product count (high to low)"
        },
        {
          "value": "products_low",
          "label": "Product count (low to high)"
        }
      ]
    },
    {
      "type": "checkbox",
      "id": "hide_empty_collections",
      "default": true,
      "label": "Hide empty collections"
    },
    {
      "type": "header",
      "content": "Section spacing"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Top padding",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Bottom padding",
      "default": 36
    }
  ],
  "presets": [
    {
      "name": "Collections Directory"
    }
  ]
}
{% endschema %} 